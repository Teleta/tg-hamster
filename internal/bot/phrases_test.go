package bot

import (
	"strings"
	"testing"
)

func TestRandomGreetingReturnsNonEmpty(t *testing.T) {
	for i := 0; i < 10; i++ {
		phrase, icon := randomGreeting()
		if phrase == "" {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –Ω–µ–ø—É—Å—Ç–∞—è —Ñ—Ä–∞–∑–∞")
		}
		if icon == "" {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –Ω–µ–ø—É—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞")
		}
	}
}

func TestPickPhraseFormat(t *testing.T) {
	for i := 0; i < 20; i++ {
		result := pickPhrase()
		if len(result) < 3 {
			t.Errorf("—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞: %q", result)
		}

		idx := strings.IndexRune(result, ' ')
		if idx <= 0 {
			t.Errorf("–û–∂–∏–¥–∞–ª—Å—è –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∏–∫–æ–Ω–∫–∏: %q", result)
		}

		if idx+1 >= len(result) {
			t.Errorf("–ü–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞: %q", result)
		}
	}
}

func TestPickPhraseRandomness(t *testing.T) {
	seen := make(map[string]bool)
	for i := 0; i < 50; i++ {
		p := pickPhrase()
		if p == "" {
			t.Errorf("pickPhrase –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")
		}
		seen[p] = true
	}
	if len(seen) < 5 {
		t.Errorf("—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑: %v", seen)
	}
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ñ—Ä–∞–∑–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–∫–æ–Ω–∫–∏
func TestPickPhraseStartsWithIcon(t *testing.T) {
	icons := []string{
		"üü¢", "üîë", "üõ°Ô∏è", "‚ö°", "üî•", "üí°", "üéØ", "üöÄ", "üß©", "ü™ê",
		"üåç", "ü§ñ", "üîí", "‚å®Ô∏è", "‚òï", "üì±", "üåü", "üîç", "üïπÔ∏è", "üéÆ",
		"üåå", "‚öîÔ∏è", "üìö", "üë®‚Äçüíª", "üö´", "üïµÔ∏è", "ü•∑", "üñ±Ô∏è", "ü•ß", "üîß",
		"üîÆ", "üí§", "üåà", "üíæ", "üõ∏", "üß†", "üîã", "üé≠", "üì°", "‚è∞",
	} // —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
	for i := 0; i < 20; i++ {
		p := pickPhrase()
		found := false
		for _, icon := range icons {
			if strings.HasPrefix(p, icon) {
				found = true
				break
			}
		}
		if !found {
			t.Errorf("–§—Ä–∞–∑–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–∫–æ–Ω–∫–∏: %q", p)
		}
	}
}

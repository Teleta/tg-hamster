package bot

import (
	"fmt"
	"log"
	"os"
	"strings"
	"sync"
	"testing"
	"time"
)

// -------------------------
// –¢–µ—Å—Ç pickPhrase
// -------------------------

func TestPickPhrase(t *testing.T) {
	for i := 0; i < 10; i++ {
		p := pickPhrase()
		if len(p) < 3 {
			t.Errorf("—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞: %q", p)
		}
		if idx := strings.IndexRune(p, ' '); idx <= 0 {
			t.Errorf("–û–∂–∏–¥–∞–ª—Å—è –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∏–∫–æ–Ω–∫–∏: %q", p)
		}
	}
}

// -------------------------
// –¢–µ—Å—Ç Timeouts
// -------------------------

func TestTimeoutCommandSetGet(t *testing.T) {
	to := NewTimeouts()
	to.Set(1, 42)
	if got := to.Get(1); got != 42 {
		t.Errorf("–æ–∂–∏–¥–∞–ª–æ—Å—å 42, –ø–æ–ª—É—á–∏–ª–∏ %d", got)
	}
	to.Save("test_timeouts.json", log.Default())
	loaded := NewTimeouts()
	loaded.Load("test_timeouts.json", log.Default())
	if got := loaded.Get(1); got != 42 {
		t.Errorf("–ø–æ—Å–ª–µ Load –æ–∂–∏–¥–∞–ª–æ—Å—å 42, –ø–æ–ª—É—á–∏–ª–∏ %d", got)
	}
	_ = os.Remove("test_timeouts.json")
}

// -------------------------
// –¢–µ—Å—Ç progressBar
// -------------------------

func TestProgressBarLength(t *testing.T) {
	bar := progressBar(10, 5)
	if len([]rune(bar)) != 12 {
		t.Errorf("progressBar –Ω–µ–≤–µ—Ä–Ω–æ–π –¥–ª–∏–Ω—ã: %q", bar)
	}
}

// -------------------------
// –¢–µ—Å—Ç progressBar —Ü–≤–µ—Ç–∞
// -------------------------

func TestProgressBarBlocks(t *testing.T) {
	tests := []struct {
		total, remaining int
		expectBlack      int
		expectOrange     int
		expectYellow     int
		expectGreen      int
	}{
		{10, 10, 0, 0, 0, 10},
		{10, 9, 1, 0, 1, 8},
		{10, 8, 2, 0, 2, 6},
		{10, 7, 3, 1, 2, 4},
		{10, 6, 4, 2, 2, 2},
		{10, 5, 5, 2, 2, 1},
		{10, 4, 6, 2, 2, 0},
		{10, 3, 7, 3, 0, 0},
		{10, 2, 8, 2, 0, 0},
		{10, 1, 9, 1, 0, 0},
		{10, 0, 10, 0, 0, 0},
	}

	for _, tt := range tests {
		bar := progressBar(tt.total, tt.remaining)
		if strings.Count(bar, "‚¨õ") != tt.expectBlack {
			t.Errorf("–ø—Ä–∏ remaining=%d –æ–∂–∏–¥–∞–ª–æ—Å—å %d —á–µ—Ä–Ω—ã—Ö, –ø–æ–ª—É—á–∏–ª–∏ %d", tt.remaining, tt.expectBlack, strings.Count(bar, "‚¨õ"))
		}
		if strings.Count(bar, "üüß") != tt.expectOrange {
			t.Errorf("–ø—Ä–∏ remaining=%d –æ–∂–∏–¥–∞–ª–æ—Å—å %d –æ—Ä–∞–Ω–∂–µ–≤—ã—Ö, –ø–æ–ª—É—á–∏–ª–∏ %d", tt.remaining, tt.expectOrange, strings.Count(bar, "üüß"))
		}
		if strings.Count(bar, "üü®") != tt.expectYellow {
			t.Errorf("–ø—Ä–∏ remaining=%d –æ–∂–∏–¥–∞–ª–æ—Å—å %d –∂–µ–ª—Ç—ã—Ö, –ø–æ–ª—É—á–∏–ª–∏ %d", tt.remaining, tt.expectYellow, strings.Count(bar, "üü®"))
		}
		if strings.Count(bar, "üü©") != tt.expectGreen {
			t.Errorf("–ø—Ä–∏ remaining=%d –æ–∂–∏–¥–∞–ª–æ—Å—å %d –∑–µ–ª–µ–Ω—ã—Ö, –ø–æ–ª—É—á–∏–ª–∏ %d", tt.remaining, tt.expectGreen, strings.Count(bar, "üü©"))
		}
	}
}

// -------------------------
// –¢–µ—Å—Ç nextClockEmoji
// -------------------------

func TestNextClockEmojiSequence(t *testing.T) {
	for i := 0; i < 24; i++ {
		e := nextClockEmoji(i)
		if e == "" {
			t.Errorf("emoji –ø—É—Å—Ç–æ–π –¥–ª—è i=%d", i)
		}
	}
}

func TestNextClockEmojiLoop(t *testing.T) {
	for i := 0; i < 50; i++ {
		e := nextClockEmoji(i)
		if e == "" {
			t.Errorf("emoji –ø—É—Å—Ç–æ–π –¥–ª—è i=%d", i)
		}
	}
}

// -------------------------
// –¢–µ—Å—Ç –∫—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
// -------------------------

func TestCacheAndCleanupMessages(t *testing.T) {
	b := &Bot{
		userMessages: make(map[int64][]cachedMessage),
		muMessages:   sync.Mutex{},
	}

	msg := Message{
		MessageID: 1,
		Text:      "/test",
		Chat:      Chat{ID: 1234},
		From:      &User{ID: 42},
	}

	update := Update{UpdateID: 1, Message: &msg}
	b.cacheMessage(update)

	if len(b.userMessages[42]) != 1 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∏–ª–∏ %d", len(b.userMessages[42]))
	}

	b.userMessages[42][0].timestamp = time.Now().Add(-61 * time.Second)
	b.CleanupOldMessages()
	if _, ok := b.userMessages[42]; ok {
		t.Errorf("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
	}
}

// -------------------------
// –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
// -------------------------

func TestSafeAPICallsNoPanic(t *testing.T) {
	b := &Bot{apiURL: "http://127.0.0.1:0", logger: log.Default()}

	defer func() {
		if r := recover(); r != nil {
			t.Errorf("panic –ø—Ä–∏ safeSendSilent: %v", r)
		}
	}()

	b.safeSendSilent(123, "test")
	b.safeSendSilentWithMarkup(123, "test", map[string]interface{}{})
	b.safeEditMessage(123, 1, "edit")
	b.safeDeleteMessage(123, 1)
}

// -------------------------
// –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–∞
// -------------------------

func TestStopProgressbar(t *testing.T) {
	stopChan := make(chan struct{})
	done := make(chan bool)

	go func() {
		select {
		case <-stopChan:
			done <- true
		case <-time.After(2 * time.Second):
			done <- false
		}
	}()

	close(stopChan)

	if !<-done {
		t.Errorf("–ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞ stopChan")
	}
}

// -------------------------
// –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
// -------------------------

func TestButtonTextEmojis(t *testing.T) {
	text := fmt.Sprintf("üëâ %s üëà", pickPhrase())
	if !strings.HasPrefix(text, "üëâ") || !strings.HasSuffix(text, "üëà") {
		t.Errorf("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —ç–º–æ–¥–∑–∏ —Ä–∞–º–∫–æ–π, –ø–æ–ª—É—á–∏–ª–∏: %q", text)
	}
}
